---
layout: post
title:  "Basketball AI"
date:   2020-02-22 16:09:14 +0800
categories: CS
---

2020.02.22

寒假的最后一个星期不想看书了，所以来学学AI。在Youtube上搜AI Mario看到一个小哥[用神经网络玩马里奥](https://www.youtube.com/watch?v=qv6UVOQ0F44),点进去看到底下推荐了一篇[Paper](http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf)。读了读感觉还挺直观的，所以打算用这个算法来训练一个玩[篮球游戏](http://t.cn/AisizCcW)的神经网络。（这个算法的名称还挺有趣的，叫NEAT）

尽管我早已意识到理解算法和写代码完全是两码事，但还是没想到dirty work这么多，几乎所有的时间都花在代码上（还有调参）。在这几天里斗鱼的主播超级小桀（超级小嬲）每天的直播和录播视频给了我坚持的动力（还有感谢我爸妈在晚上去麦当劳给我买汉堡吃）。

Used to look up at the stars and be like ain't too much that's different

I'll be shinin',they'll be shinin   ---*One man can change the world*


首先要把整个游戏下载到本地，chrome上有个插件Resources Saver可以把资源打包下载。然后看了看用的是cocos2d-js引擎，花了一天读文档，一点点地看js代码终于搞清楚了大概的框架。不知道是编译后的结果还是写游戏的人脑子有问题，里面的判断都是拿短路运算做的，为了不写if的括号还拿逗号来执行多条语句，真是看的人折寿。


由于游戏是拿js写的，为了模拟游戏只能用 headless browser，然后在游戏的流程里写脚本。不过用这种方案不仅cpu占用率高，而且在后面在服务器上跑并行的时候有问题，进程莫名其妙就被暂停了。导致算法适应度计算的整体效率极慢，在我的机子上大约是90秒60次模拟，32核的云服务器上大约是100秒210次。不过，腾讯云上的AMD32核服务器只要7毛一个小时（AMD,YES！），这些问题还不算很棘手。

搞好了模拟部分就要写神经网络算法，事实上核心的部分在js上就几行（贴出来才发现写的好丑陋）：
```
function network(x) {
    var r=new Object();
    for(var i = 0; i < 5; i++){
      r[(i-5).toString()]=x[i]
    }
    for (let x of obj){
        var node_inputs = []
          for (let y of x['l']){
            node_inputs.push(r[y[0].toString()]*y[1]);
          }
          s= node_inputs.reduce((a, b) => a + b, 0);
          r[x['n'].toString()] = 1/(1+Math.pow(Math.E,Math.max(-60.0, -Math.min(60.0, 5.0 * (x['b']+x['r']*s)))));
    }
    return [r['0']>0.5,r['0']];
}
```
训练模型时需要对游戏模型进行一些修改，把篮板上下移动关闭，缩短第一次投篮时间来减少判断0分的时间。这个神经网络的输入有六个值分别为：球的速度向量，球的坐标向量，篮板的高度，篮板的左右。但是实际效果并不是很好。考虑到篮板的左右对称性，把输入值改为5个，篮板在左时为原始值，在右时对坐标进行镜像对称。操作的间隔为0.2秒（事实上有点作弊的感觉，应该没人对着手机一秒五戳吧）。

在服务器上调试了3天，来分析下截止目前跑出来的一些解，这些解有的能做到在实战中砍下200分（我反正是做不到），有的能利用游戏机制对每个球都打板来获得高分。犹记得看到前者的时候是它在训练中砍下91高分，把我吓坏了，我应该会永远记得91这个数字了（可能比kobe的81还要印象深刻）。而还有的解相当的trivial，size只有1，就是当球在初始篮筐上面的时候就松手，不然就使劲点。由于抛物线的性质这个解还相当稳定。。。而91哥也相当的trivial，它也只有1层并且还没有链接球的x速度坐标（因为这游戏里只有碰撞改变球的水平速度），所以固定球的速度y坐标和篮板的位置，松手点和投篮点被一条超平面也就是直线分割。这条直线的斜率就是球的速度x值。但在篮板下方这个解就表现的很不成功。当然如果没有bonus和篮板碰撞的话这就是解了。从工程的角度来说，可以训练一个篮板下方的模型组合到神经网络，但这样模型变得丑陋并且达不到高分。而我训练出来的打板神经网络更为魔幻的是根本没有链接速度向量，而且只有一层，估计是在假设了一些条件下的超平面。（由于这里的碰撞很简单，所以估计是把篮筐根据篮板镜面对称得到的解。）

第一个demo写完后，需要解决的问题是：


1. NEAT遗传算法在适应度为随机抽样时，解的收敛性有何性质？

2. 镜像变换的参数是我手动输入的，有一定误差，如何把这个参数的修正和模型训练统一起来。

3. 篮板运动下的游戏模型